import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Badge } from "@/components/ui/badge";
import { Switch } from "@/components/ui/switch";
import { Separator } from "@/components/ui/separator";
import { Plus, Trash2, Zap, Shield } from "lucide-react";
import { useThreat, ThreatAction, ThreatFeature } from "@/context/ThreatContext";
import { DAMAGE_TYPES } from "@/data/zombieFeatures";
import { PACE_TYPES } from "@/utils/threatModifiers";
import { useState } from "react";

const ACTION_TYPES = ["Action", "Bonus", "Demanding", "Reaction"];
const DEFENSES = ["Avoidance", "Fortitude", "Willpower"];
const FEATURE_TYPES = ["trait", "immunity", "Damage Resistance", "vulnerability", "special", "power"];

export default function Step8_Actions() {
  const { threat, updateThreatField, setCurrentStep } = useThreat();
  const actions = threat.actions;
  const features = threat.features;
  
  // Action form state
  const [actionForm, setActionForm] = useState<Partial<ThreatAction>>({
    type: "Attack",
    actionType: "Action",
    autoGenerated: false,
    source: "Custom"
  });
  
  // Feature form state
  const [featureForm, setFeatureForm] = useState<Partial<ThreatFeature>>({
    type: "trait",
    autoGenerated: false,
    source: "Custom"
  });

  const handleNext = () => {
    // Actions and features are already stored in context via updateThreatField
    setCurrentStep(9); // Go to Step 9 (Summary)
  };

  const handleBack = () => {
    setCurrentStep(7); // Go back to Step 7 (AbilityScores)
  };

  const addAction = () => {
    // Attack actions only need a name, non-attack actions need both name and description
    if (!actionForm.name) return;
    if (actionForm.type === "Non-Attack" && !actionForm.description) return;
    
    const newAction: ThreatAction = {
      id: `action-${Date.now()}`,
      name: actionForm.name,
      type: actionForm.type || "Attack",
      actionType: actionForm.actionType,
      description: actionForm.description || "",
      toHit: actionForm.toHit,
      damage: actionForm.damage,
      damageType: actionForm.damageType,
      defense: actionForm.defense,
      range: actionForm.range,
      area: actionForm.area || "one creature",
      duration: actionForm.duration,
      frequency: actionForm.frequency,
      effects: actionForm.effects,
      notes: actionForm.notes,
      successText: actionForm.successText,
      autoGenerated: false,
      source: "Custom"
    };
    
    updateThreatField("actions", [...actions, newAction]);
    setActionForm({ type: "Attack", actionType: "Action", autoGenerated: false, source: "Custom" });
  };

  const removeAction = (id: string) => {
    updateThreatField("actions", actions.filter(action => action.id !== id));
  };

  const addFeature = () => {
    if (!featureForm.name || !featureForm.description) return;
    
    const newFeature: ThreatFeature = {
      id: `feature-${Date.now()}`,
      name: featureForm.name!,
      description: featureForm.description!,
      type: featureForm.type || "trait",
      source: "Custom",
      autoGenerated: false
    };
    
    updateThreatField("features", [...features, newFeature]);
    setFeatureForm({ type: "trait", autoGenerated: false, source: "Custom" });
  };

  const removeFeature = (id: string) => {
    updateThreatField("features", features.filter(feature => feature.id !== id));
  };

  const generateAttackFormat = () => {
    if (actionForm.type !== "Attack") return "";
    
    const parts = [];
    if (actionForm.toHit) parts.push(`+${actionForm.toHit} to hit`);
    if (actionForm.defense) parts.push(actionForm.defense);
    
    let reachRange = "";
    if (actionForm.range?.toLowerCase().includes("melee")) {
      // Support "melee #" format 
      const meleeMatch = actionForm.range.match(/melee\s*(\d+)/i);
      if (meleeMatch) {
        reachRange = `reach: melee ${meleeMatch[1]}`;
      } else {
        reachRange = `reach: melee`;
      }
    } else if (actionForm.range) {
      reachRange = `Ranged ${actionForm.range}`;
    }
    if (reachRange) parts.push(reachRange);
    
    if (actionForm.area) parts.push(actionForm.area);
    
    if (actionForm.damage && actionForm.damageType) {
      parts.push(`Hit: ${actionForm.damage} ${actionForm.damageType}`);
    }
    
    let formatted = parts.join(", ");
    if (formatted) formatted += ".";
    
    if (actionForm.successText) {
      formatted += ` Upon a successful hit, ${actionForm.successText}`;
    }
    
    return formatted;
  };

  return (
    <div className="space-y-6" data-testid="step-actions">
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <span className="flex h-8 w-8 items-center justify-center rounded-full bg-primary text-primary-foreground font-semibold">
              8
            </span>
            Actions & Features
          </CardTitle>
          <CardDescription>
            Add custom actions and features to define what your threat can do. Attacks follow a specific format.
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-8">
          
          {/* Actions Section */}
          <div className="space-y-4">
            <div className="flex items-center gap-2">
              <Zap className="h-5 w-5 text-primary" />
              <h3 className="text-lg font-semibold">Actions</h3>
            </div>
            
            {/* Current Actions */}
            {actions.length > 0 && (
              <div className="space-y-2">
                {actions.map((action) => (
                  <Card key={action.id} className="p-3">
                    <div className="flex items-start justify-between">
                      <div className="flex-1">
                        <div className="flex items-center gap-2 mb-1">
                          <h4 className="font-medium">{action.name}</h4>
                          <Badge variant={action.type === "Attack" ? "destructive" : "secondary"}>
                            {action.type}
                          </Badge>
                          {action.actionType && (
                            <Badge variant="outline">{action.actionType}</Badge>
                          )}
                        </div>
                        <p className="text-sm text-muted-foreground">{action.description}</p>
                        {action.type === "Attack" && (
                          <p className="text-sm mt-1 font-mono bg-muted/50 p-2 rounded">
                            {generateAttackFormat()}
                          </p>
                        )}
                      </div>
                      <Button
                        size="sm"
                        variant="ghost"
                        onClick={() => removeAction(action.id)}
                        data-testid={`remove-action-${action.id}`}
                      >
                        <Trash2 className="h-4 w-4" />
                      </Button>
                    </div>
                  </Card>
                ))}
              </div>
            )}

            {/* Add Action Form */}
            <Card className="p-4 bg-muted/20">
              <h4 className="font-medium mb-3">Add New Action</h4>
              <div className="grid gap-4">
                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <Label htmlFor="action-name">Name</Label>
                    <Input
                      id="action-name"
                      data-testid="input-action-name"
                      placeholder="e.g., Bite, Claw, Punch"
                      value={actionForm.name || ""}
                      onChange={(e) => setActionForm(prev => ({ ...prev, name: e.target.value }))}
                    />
                  </div>
                  <div>
                    <Label htmlFor="action-type">Type</Label>
                    <Select 
                      value={actionForm.type} 
                      onValueChange={(value) => setActionForm(prev => ({ ...prev, type: value as "Attack" | "Non-Attack" }))}
                    >
                      <SelectTrigger data-testid="select-action-type">
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="Attack">Attack</SelectItem>
                        <SelectItem value="Non-Attack">Non-Attack</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                </div>

                {actionForm.type === "Attack" && (
                  <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                    <div>
                      <Label htmlFor="action-type-field">Action Type</Label>
                      <Select 
                        value={actionForm.actionType} 
                        onValueChange={(value) => setActionForm(prev => ({ ...prev, actionType: value as "Action" | "Bonus" | "Demanding" | "Reaction" }))}
                      >
                        <SelectTrigger data-testid="select-action-type-field">
                          <SelectValue placeholder="Select..." />
                        </SelectTrigger>
                        <SelectContent>
                          {ACTION_TYPES.map(type => (
                            <SelectItem key={type} value={type}>{type}</SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                    </div>
                    <div>
                      <Label htmlFor="action-to-hit">To Hit Bonus</Label>
                      <Input
                        id="action-to-hit"
                        data-testid="input-to-hit"
                        type="number"
                        placeholder="e.g., 6"
                        value={actionForm.toHit || ""}
                        onChange={(e) => setActionForm(prev => ({ ...prev, toHit: parseInt(e.target.value) || undefined }))}
                      />
                    </div>
                    <div>
                      <Label htmlFor="action-defense">Target Defense</Label>
                      <Select 
                        value={actionForm.defense} 
                        onValueChange={(value) => setActionForm(prev => ({ ...prev, defense: value }))}
                      >
                        <SelectTrigger data-testid="select-defense">
                          <SelectValue placeholder="Select..." />
                        </SelectTrigger>
                        <SelectContent>
                          {DEFENSES.map(defense => (
                            <SelectItem key={defense} value={defense}>{defense}</SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                    </div>
                    <div>
                      <Label htmlFor="action-range">Reach/Range</Label>
                      <Input
                        id="action-range"
                        data-testid="input-range"
                        placeholder="e.g., melee 1, melee 2, 50 feet"
                        value={actionForm.range || ""}
                        onChange={(e) => setActionForm(prev => ({ ...prev, range: e.target.value }))}
                      />
                    </div>
                  </div>
                )}

                {actionForm.type === "Attack" && (
                  <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
                    <div>
                      <Label htmlFor="action-damage">Damage</Label>
                      <Input
                        id="action-damage"
                        data-testid="input-damage"
                        placeholder="e.g., 1d10+3"
                        value={actionForm.damage || ""}
                        onChange={(e) => setActionForm(prev => ({ ...prev, damage: e.target.value }))}
                      />
                    </div>
                    <div>
                      <Label htmlFor="damage-type">Damage Type</Label>
                      <Select 
                        value={actionForm.damageType} 
                        onValueChange={(value) => setActionForm(prev => ({ ...prev, damageType: value }))}
                      >
                        <SelectTrigger data-testid="select-damage-type">
                          <SelectValue placeholder="Select..." />
                        </SelectTrigger>
                        <SelectContent>
                          {DAMAGE_TYPES.map(type => (
                            <SelectItem key={type} value={type}>{type}</SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                    </div>
                    <div>
                      <Label htmlFor="action-area">Area/Targets</Label>
                      <Input
                        id="action-area"
                        data-testid="input-area"
                        placeholder="e.g., one creature"
                        value={actionForm.area || ""}
                        onChange={(e) => setActionForm(prev => ({ ...prev, area: e.target.value }))}
                      />
                    </div>
                  </div>
                )}

                <div>
                  <Label htmlFor="action-description">
                    Description {actionForm.type === "Non-Attack" ? "" : "(Optional for attacks)"}
                  </Label>
                  <Textarea
                    id="action-description"
                    data-testid="textarea-action-description"
                    placeholder="Describe what this action does..."
                    value={actionForm.description || ""}
                    onChange={(e) => setActionForm(prev => ({ ...prev, description: e.target.value }))}
                  />
                </div>

                {actionForm.type === "Attack" && (
                  <div>
                    <Label htmlFor="success-text">Upon a Successful Hit (Optional)</Label>
                    <Input
                      id="success-text"
                      data-testid="input-success-text"
                      placeholder="e.g., the target is grappled (escape DC 13)"
                      value={actionForm.successText || ""}
                      onChange={(e) => setActionForm(prev => ({ ...prev, successText: e.target.value }))}
                    />
                  </div>
                )}

                {actionForm.type === "Attack" && (
                  <div className="p-3 bg-muted/50 rounded-lg">
                    <Label className="text-sm font-medium">Preview Format:</Label>
                    <p className="text-sm font-mono mt-1">
                      <span className="font-medium">{actionForm.name || "Action Name"}:</span>{" "}
                      {generateAttackFormat() || "Configure attack details above to see preview"}
                    </p>
                  </div>
                )}

                <Button 
                  onClick={addAction}
                  disabled={!actionForm.name || (actionForm.type === "Non-Attack" && !actionForm.description)}
                  data-testid="button-add-action"
                >
                  <Plus className="h-4 w-4 mr-2" />
                  Add Action
                </Button>
              </div>
            </Card>
          </div>

          <Separator />

          {/* Features Section */}
          <div className="space-y-4">
            <div className="flex items-center gap-2">
              <Shield className="h-5 w-5 text-primary" />
              <h3 className="text-lg font-semibold">Features</h3>
            </div>
            
            {/* Current Features */}
            {features.length > 0 && (
              <div className="space-y-2">
                {features.map((feature) => (
                  <Card key={feature.id} className="p-3">
                    <div className="flex items-start justify-between">
                      <div className="flex-1">
                        <div className="flex items-center gap-2 mb-1">
                          <h4 className="font-medium">{feature.name}</h4>
                          <Badge variant="outline">{feature.type}</Badge>
                        </div>
                        <p className="text-sm text-muted-foreground">{feature.description}</p>
                      </div>
                      <Button
                        size="sm"
                        variant="ghost"
                        onClick={() => removeFeature(feature.id)}
                        data-testid={`remove-feature-${feature.id}`}
                      >
                        <Trash2 className="h-4 w-4" />
                      </Button>
                    </div>
                  </Card>
                ))}
              </div>
            )}

            {/* Add Feature Form */}
            <Card className="p-4 bg-muted/20">
              <h4 className="font-medium mb-3">Add New Feature</h4>
              <div className="grid gap-4">
                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <Label htmlFor="feature-name">Name</Label>
                    <Input
                      id="feature-name"
                      data-testid="input-feature-name"
                      placeholder="e.g., Enhanced Senses, Armor"
                      value={featureForm.name || ""}
                      onChange={(e) => setFeatureForm(prev => ({ ...prev, name: e.target.value }))}
                    />
                  </div>
                  <div>
                    <Label htmlFor="feature-type">Type</Label>
                    <Select 
                      value={featureForm.type} 
                      onValueChange={(value) => setFeatureForm(prev => ({ ...prev, type: value as any }))}
                    >
                      <SelectTrigger data-testid="select-feature-type">
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        {FEATURE_TYPES.map(type => (
                          <SelectItem key={type} value={type}>{type}</SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </div>
                </div>

                <div>
                  <Label htmlFor="feature-description">Description</Label>
                  <Textarea
                    id="feature-description"
                    data-testid="textarea-feature-description"
                    placeholder="Describe what this feature does..."
                    value={featureForm.description || ""}
                    onChange={(e) => setFeatureForm(prev => ({ ...prev, description: e.target.value }))}
                  />
                </div>

                <Button 
                  onClick={addFeature}
                  disabled={!featureForm.name || !featureForm.description}
                  data-testid="button-add-feature"
                >
                  <Plus className="h-4 w-4 mr-2" />
                  Add Feature
                </Button>
              </div>
            </Card>
          </div>

          <Separator />

          {/* Pace Section */}
          <div className="space-y-4">
            <div className="flex items-center gap-2">
              <Zap className="h-5 w-5 text-primary" />
              <h3 className="text-lg font-semibold">Movement</h3>
            </div>
            
            <Card className="p-4 bg-muted/20">
              <div className="grid gap-4">
                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <Label htmlFor="base-pace">Base Pace (areas)</Label>
                    <Select 
                      value={threat.basePace?.toString() || "2"} 
                      onValueChange={(value) => updateThreatField("basePace", parseInt(value))}
                    >
                      <SelectTrigger data-testid="select-base-pace">
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        {[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 15, 20].map(pace => (
                          <SelectItem key={pace} value={pace.toString()}>{pace}</SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </div>
                </div>

                {/* Additional Pace Types */}
                <div>
                  <Label>Additional Movement Types</Label>
                  <div className="space-y-2 mt-2">
                    {threat.additionalPaces?.map((paceType, index) => (
                      <div key={index} className="flex items-center gap-2">
                        <Badge variant="outline">{paceType.type} {paceType.value}</Badge>
                        <Button
                          size="sm"
                          variant="ghost"
                          onClick={() => {
                            const newPaces = threat.additionalPaces?.filter((_, i) => i !== index) || [];
                            updateThreatField("additionalPaces", newPaces);
                          }}
                          data-testid={`remove-pace-${index}`}
                        >
                          <Trash2 className="h-4 w-4" />
                        </Button>
                      </div>
                    ))}
                    
                    <div className="grid grid-cols-3 gap-2">
                      <Select 
                        value=""
                        onValueChange={(type) => {
                          if (type) {
                            const newPace = { type, value: threat.basePace || 2 };
                            const currentPaces = threat.additionalPaces || [];
                            updateThreatField("additionalPaces", [...currentPaces, newPace]);
                          }
                        }}
                      >
                        <SelectTrigger data-testid="select-add-pace-type">
                          <SelectValue placeholder="Add movement type" />
                        </SelectTrigger>
                        <SelectContent>
                          {PACE_TYPES.map(type => (
                            <SelectItem key={type} value={type}>{type}</SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                    </div>
                  </div>
                </div>
              </div>
            </Card>
          </div>
        </CardContent>
      </Card>

      <div className="flex justify-between">
        <Button variant="outline" onClick={handleBack} data-testid="button-back">
          Back: Templates
        </Button>
        <Button onClick={handleNext} data-testid="button-next">
          Next: Summary
        </Button>
      </div>
    </div>
  );
}